// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2021 20:35:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] pc_base;
reg pc_en;
reg pc_load;
reg [7:0] pc_offset;
reg pc_sel;
reg rst;
// wires                                               
wire [15:0] q;

// assign statements (if any)                          
pc16 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.pc_base(pc_base),
	.pc_en(pc_en),
	.pc_load(pc_load),
	.pc_offset(pc_offset),
	.pc_sel(pc_sel),
	.q(q),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 
// pc_base[ 15 ]
initial
begin
	pc_base[15] = 1'b0;
end 
// pc_base[ 14 ]
initial
begin
	pc_base[14] = 1'b0;
end 
// pc_base[ 13 ]
initial
begin
	pc_base[13] = 1'b0;
end 
// pc_base[ 12 ]
initial
begin
	pc_base[12] = 1'b0;
end 
// pc_base[ 11 ]
initial
begin
	pc_base[11] = 1'b0;
end 
// pc_base[ 10 ]
initial
begin
	pc_base[10] = 1'b0;
end 
// pc_base[ 9 ]
initial
begin
	pc_base[9] = 1'b0;
end 
// pc_base[ 8 ]
initial
begin
	pc_base[8] = 1'b0;
end 
// pc_base[ 7 ]
initial
begin
	pc_base[7] = 1'b0;
end 
// pc_base[ 6 ]
initial
begin
	pc_base[6] = 1'b0;
end 
// pc_base[ 5 ]
initial
begin
	pc_base[5] = 1'b0;
end 
// pc_base[ 4 ]
initial
begin
	pc_base[4] = 1'b1;
end 
// pc_base[ 3 ]
initial
begin
	pc_base[3] = 1'b0;
end 
// pc_base[ 2 ]
initial
begin
	pc_base[2] = 1'b0;
end 
// pc_base[ 1 ]
initial
begin
	pc_base[1] = 1'b1;
end 
// pc_base[ 0 ]
initial
begin
	pc_base[0] = 1'b0;
end 

// pc_en
initial
begin
	pc_en = 1'b0;
	pc_en = #20000 1'b1;
end 

// pc_load
initial
begin
	pc_load = 1'b0;
	pc_load = #110000 1'b1;
end 
// pc_offset[ 7 ]
initial
begin
	pc_offset[7] = 1'b0;
end 
// pc_offset[ 6 ]
initial
begin
	pc_offset[6] = 1'b0;
end 
// pc_offset[ 5 ]
initial
begin
	pc_offset[5] = 1'b0;
end 
// pc_offset[ 4 ]
initial
begin
	pc_offset[4] = 1'b0;
end 
// pc_offset[ 3 ]
initial
begin
	pc_offset[3] = 1'b0;
end 
// pc_offset[ 2 ]
initial
begin
	pc_offset[2] = 1'b1;
end 
// pc_offset[ 1 ]
initial
begin
	pc_offset[1] = 1'b0;
end 
// pc_offset[ 0 ]
initial
begin
	pc_offset[0] = 1'b1;
end 

// pc_sel
initial
begin
	pc_sel = 1'b0;
	pc_sel = #200000 1'b1;
end 
endmodule

