// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/01/2021 18:46:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab4_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] data0x;
reg [15:0] data1x;
reg [15:0] data2x;
reg [15:0] data3x;
reg [15:0] data4x;
reg [15:0] data5x;
reg [15:0] data6x;
reg [15:0] data7x;
reg [2:0] sel;
// wires                                               
wire [15:0] result;

// assign statements (if any)                          
lab4_1 i1 (
// port map - connection between master ports and signals/registers   
	.data0x(data0x),
	.data1x(data1x),
	.data2x(data2x),
	.data3x(data3x),
	.data4x(data4x),
	.data5x(data5x),
	.data6x(data6x),
	.data7x(data7x),
	.result(result),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// data0x[ 15 ]
initial
begin
	data0x[15] = 1'b0;
end 
// data0x[ 14 ]
initial
begin
	data0x[14] = 1'b0;
end 
// data0x[ 13 ]
initial
begin
	data0x[13] = 1'b0;
end 
// data0x[ 12 ]
initial
begin
	data0x[12] = 1'b0;
end 
// data0x[ 11 ]
initial
begin
	data0x[11] = 1'b0;
end 
// data0x[ 10 ]
initial
begin
	data0x[10] = 1'b0;
end 
// data0x[ 9 ]
initial
begin
	data0x[9] = 1'b0;
end 
// data0x[ 8 ]
initial
begin
	data0x[8] = 1'b0;
end 
// data0x[ 7 ]
initial
begin
	data0x[7] = 1'b0;
end 
// data0x[ 6 ]
initial
begin
	data0x[6] = 1'b0;
end 
// data0x[ 5 ]
initial
begin
	data0x[5] = 1'b0;
end 
// data0x[ 4 ]
initial
begin
	data0x[4] = 1'b0;
end 
// data0x[ 3 ]
initial
begin
	data0x[3] = 1'b0;
end 
// data0x[ 2 ]
initial
begin
	data0x[2] = 1'b0;
end 
// data0x[ 1 ]
initial
begin
	data0x[1] = 1'b0;
end 
// data0x[ 0 ]
initial
begin
	data0x[0] = 1'b0;
end 
// data1x[ 15 ]
initial
begin
	data1x[15] = 1'b0;
end 
// data1x[ 14 ]
initial
begin
	data1x[14] = 1'b0;
end 
// data1x[ 13 ]
initial
begin
	data1x[13] = 1'b0;
end 
// data1x[ 12 ]
initial
begin
	data1x[12] = 1'b0;
end 
// data1x[ 11 ]
initial
begin
	data1x[11] = 1'b0;
end 
// data1x[ 10 ]
initial
begin
	data1x[10] = 1'b0;
end 
// data1x[ 9 ]
initial
begin
	data1x[9] = 1'b0;
end 
// data1x[ 8 ]
initial
begin
	data1x[8] = 1'b0;
end 
// data1x[ 7 ]
initial
begin
	data1x[7] = 1'b0;
end 
// data1x[ 6 ]
initial
begin
	data1x[6] = 1'b0;
end 
// data1x[ 5 ]
initial
begin
	data1x[5] = 1'b0;
end 
// data1x[ 4 ]
initial
begin
	data1x[4] = 1'b0;
end 
// data1x[ 3 ]
initial
begin
	data1x[3] = 1'b0;
end 
// data1x[ 2 ]
initial
begin
	data1x[2] = 1'b0;
end 
// data1x[ 1 ]
initial
begin
	data1x[1] = 1'b0;
end 
// data1x[ 0 ]
initial
begin
	data1x[0] = 1'b1;
end 
// data2x[ 15 ]
initial
begin
	data2x[15] = 1'b0;
end 
// data2x[ 14 ]
initial
begin
	data2x[14] = 1'b0;
end 
// data2x[ 13 ]
initial
begin
	data2x[13] = 1'b0;
end 
// data2x[ 12 ]
initial
begin
	data2x[12] = 1'b0;
end 
// data2x[ 11 ]
initial
begin
	data2x[11] = 1'b0;
end 
// data2x[ 10 ]
initial
begin
	data2x[10] = 1'b0;
end 
// data2x[ 9 ]
initial
begin
	data2x[9] = 1'b0;
end 
// data2x[ 8 ]
initial
begin
	data2x[8] = 1'b0;
end 
// data2x[ 7 ]
initial
begin
	data2x[7] = 1'b0;
end 
// data2x[ 6 ]
initial
begin
	data2x[6] = 1'b0;
end 
// data2x[ 5 ]
initial
begin
	data2x[5] = 1'b0;
end 
// data2x[ 4 ]
initial
begin
	data2x[4] = 1'b0;
end 
// data2x[ 3 ]
initial
begin
	data2x[3] = 1'b0;
end 
// data2x[ 2 ]
initial
begin
	data2x[2] = 1'b0;
end 
// data2x[ 1 ]
initial
begin
	data2x[1] = 1'b1;
end 
// data2x[ 0 ]
initial
begin
	data2x[0] = 1'b0;
end 
// data3x[ 15 ]
initial
begin
	data3x[15] = 1'b0;
end 
// data3x[ 14 ]
initial
begin
	data3x[14] = 1'b0;
end 
// data3x[ 13 ]
initial
begin
	data3x[13] = 1'b0;
end 
// data3x[ 12 ]
initial
begin
	data3x[12] = 1'b0;
end 
// data3x[ 11 ]
initial
begin
	data3x[11] = 1'b0;
end 
// data3x[ 10 ]
initial
begin
	data3x[10] = 1'b0;
end 
// data3x[ 9 ]
initial
begin
	data3x[9] = 1'b0;
end 
// data3x[ 8 ]
initial
begin
	data3x[8] = 1'b0;
end 
// data3x[ 7 ]
initial
begin
	data3x[7] = 1'b0;
end 
// data3x[ 6 ]
initial
begin
	data3x[6] = 1'b0;
end 
// data3x[ 5 ]
initial
begin
	data3x[5] = 1'b0;
end 
// data3x[ 4 ]
initial
begin
	data3x[4] = 1'b0;
end 
// data3x[ 3 ]
initial
begin
	data3x[3] = 1'b0;
end 
// data3x[ 2 ]
initial
begin
	data3x[2] = 1'b0;
end 
// data3x[ 1 ]
initial
begin
	data3x[1] = 1'b1;
end 
// data3x[ 0 ]
initial
begin
	data3x[0] = 1'b1;
end 
// data4x[ 15 ]
initial
begin
	data4x[15] = 1'b0;
end 
// data4x[ 14 ]
initial
begin
	data4x[14] = 1'b0;
end 
// data4x[ 13 ]
initial
begin
	data4x[13] = 1'b0;
end 
// data4x[ 12 ]
initial
begin
	data4x[12] = 1'b0;
end 
// data4x[ 11 ]
initial
begin
	data4x[11] = 1'b0;
end 
// data4x[ 10 ]
initial
begin
	data4x[10] = 1'b0;
end 
// data4x[ 9 ]
initial
begin
	data4x[9] = 1'b0;
end 
// data4x[ 8 ]
initial
begin
	data4x[8] = 1'b0;
end 
// data4x[ 7 ]
initial
begin
	data4x[7] = 1'b0;
end 
// data4x[ 6 ]
initial
begin
	data4x[6] = 1'b0;
end 
// data4x[ 5 ]
initial
begin
	data4x[5] = 1'b0;
end 
// data4x[ 4 ]
initial
begin
	data4x[4] = 1'b0;
end 
// data4x[ 3 ]
initial
begin
	data4x[3] = 1'b0;
end 
// data4x[ 2 ]
initial
begin
	data4x[2] = 1'b1;
end 
// data4x[ 1 ]
initial
begin
	data4x[1] = 1'b0;
end 
// data4x[ 0 ]
initial
begin
	data4x[0] = 1'b0;
end 
// data5x[ 15 ]
initial
begin
	data5x[15] = 1'b0;
end 
// data5x[ 14 ]
initial
begin
	data5x[14] = 1'b0;
end 
// data5x[ 13 ]
initial
begin
	data5x[13] = 1'b0;
end 
// data5x[ 12 ]
initial
begin
	data5x[12] = 1'b0;
end 
// data5x[ 11 ]
initial
begin
	data5x[11] = 1'b0;
end 
// data5x[ 10 ]
initial
begin
	data5x[10] = 1'b0;
end 
// data5x[ 9 ]
initial
begin
	data5x[9] = 1'b0;
end 
// data5x[ 8 ]
initial
begin
	data5x[8] = 1'b0;
end 
// data5x[ 7 ]
initial
begin
	data5x[7] = 1'b0;
end 
// data5x[ 6 ]
initial
begin
	data5x[6] = 1'b0;
end 
// data5x[ 5 ]
initial
begin
	data5x[5] = 1'b0;
end 
// data5x[ 4 ]
initial
begin
	data5x[4] = 1'b0;
end 
// data5x[ 3 ]
initial
begin
	data5x[3] = 1'b0;
end 
// data5x[ 2 ]
initial
begin
	data5x[2] = 1'b1;
end 
// data5x[ 1 ]
initial
begin
	data5x[1] = 1'b0;
end 
// data5x[ 0 ]
initial
begin
	data5x[0] = 1'b1;
end 
// data6x[ 15 ]
initial
begin
	data6x[15] = 1'b0;
end 
// data6x[ 14 ]
initial
begin
	data6x[14] = 1'b0;
end 
// data6x[ 13 ]
initial
begin
	data6x[13] = 1'b0;
end 
// data6x[ 12 ]
initial
begin
	data6x[12] = 1'b1;
end 
// data6x[ 11 ]
initial
begin
	data6x[11] = 1'b0;
end 
// data6x[ 10 ]
initial
begin
	data6x[10] = 1'b0;
end 
// data6x[ 9 ]
initial
begin
	data6x[9] = 1'b1;
end 
// data6x[ 8 ]
initial
begin
	data6x[8] = 1'b0;
end 
// data6x[ 7 ]
initial
begin
	data6x[7] = 1'b0;
end 
// data6x[ 6 ]
initial
begin
	data6x[6] = 1'b0;
end 
// data6x[ 5 ]
initial
begin
	data6x[5] = 1'b1;
end 
// data6x[ 4 ]
initial
begin
	data6x[4] = 1'b1;
end 
// data6x[ 3 ]
initial
begin
	data6x[3] = 1'b0;
end 
// data6x[ 2 ]
initial
begin
	data6x[2] = 1'b1;
end 
// data6x[ 1 ]
initial
begin
	data6x[1] = 1'b0;
end 
// data6x[ 0 ]
initial
begin
	data6x[0] = 1'b0;
end 
// data7x[ 15 ]
initial
begin
	data7x[15] = 1'b0;
end 
// data7x[ 14 ]
initial
begin
	data7x[14] = 1'b0;
end 
// data7x[ 13 ]
initial
begin
	data7x[13] = 1'b1;
end 
// data7x[ 12 ]
initial
begin
	data7x[12] = 1'b0;
end 
// data7x[ 11 ]
initial
begin
	data7x[11] = 1'b0;
end 
// data7x[ 10 ]
initial
begin
	data7x[10] = 1'b0;
end 
// data7x[ 9 ]
initial
begin
	data7x[9] = 1'b1;
end 
// data7x[ 8 ]
initial
begin
	data7x[8] = 1'b1;
end 
// data7x[ 7 ]
initial
begin
	data7x[7] = 1'b0;
end 
// data7x[ 6 ]
initial
begin
	data7x[6] = 1'b1;
end 
// data7x[ 5 ]
initial
begin
	data7x[5] = 1'b0;
end 
// data7x[ 4 ]
initial
begin
	data7x[4] = 1'b0;
end 
// data7x[ 3 ]
initial
begin
	data7x[3] = 1'b0;
end 
// data7x[ 2 ]
initial
begin
	data7x[2] = 1'b1;
end 
// data7x[ 1 ]
initial
begin
	data7x[1] = 1'b0;
end 
// data7x[ 0 ]
initial
begin
	data7x[0] = 1'b1;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b0;
	sel[2] = #160000 1'b1;
	sel[2] = #160000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #80000 1'b1;
	sel[1] = #80000 1'b0;
	sel[1] = #80000 1'b1;
	sel[1] = #80000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
	sel[0] = #40000 1'b1;
	sel[0] = #40000 1'b0;
	sel[0] = #40000 1'b1;
	sel[0] = #40000 1'b0;
	sel[0] = #40000 1'b1;
	sel[0] = #40000 1'b0;
	sel[0] = #40000 1'b1;
	sel[0] = #40000 1'b0;
end 
endmodule

